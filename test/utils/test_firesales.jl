# L·µâ = [9., 4., 2.]
# A = [0 0.5 0;
#      0 0 0.5;
#      0.5 0 0]
# A·µâ = [10., 5., 3.]
# enmodel = FinNetValu.EisenbergNoeModel(L·µâ, A')

Œ† = [100 20 30;
    30 50 200]
C = [100, 200]
Œò = [20 30 40 100;
    60 410 100 10]
œµ = [0.1, 0.0, 0.5, 0.0]
Œª_max = 1.2
I_test = [168. 524.]
q = [1. 3.]
S = [1. 3.]
fsmodel = FinNetValu.FireSalesModel(Œ†, C, Œò, œµ, Œª_max)

@testset "firesales" begin
    # @test @isdefined enmodel
    # @test enmodel.name == "Eisenberg & Noe"
    # @test fieldnames(typeof(enmodel)) == (:name, :N, :A, :l, :ùïç·µâ, :ùïç)

    @test @isdefined fsmodel
    @test fieldnames(typeof(fsmodel)) == (:Œ†, :C, :I_œµ, :Œª_max, :Œª_target)

    @test_throws ArgumentError FinNetValu.FireSalesModel(Œ†', C, Œò, œµ, Œª_max)
    @test_throws ArgumentError FinNetValu.FireSalesModel(Œ†, C, Œò', œµ, Œª_max)
    @test_throws ArgumentError FinNetValu.FireSalesModel(Œ†, C, Œò, œµ[1:end-1],
                                                        Œª_max)
    @test_throws ArgumentError FinNetValu.FireSalesModel(Œ†, C, Œò, œµ[1:end-1],
                                                        Œª_max, Œª_max+1)

    @test fsmodel.I_œµ' == I_test
end

@testset "deleverageproportion" begin
    @test FinNetValu.delevprop(fsmodel, Œ†, C) != false
end

@testset "marketimpact" begin
    @test FinNetValu.marketimpact(fsmodel, q, S) != false
end
